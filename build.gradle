buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-dependency-recommender:4.2.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.2.0'
        classpath 'org.starchartlabs.flare:flare-operations-plugins:2.0.0'
        classpath 'org.starchartlabs.flare:flare-publishing-plugins:1.0.0'
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.2'
    }
} 

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'nebula.dependency-recommender'
apply plugin: 'nebula.maven-resolved-dependencies'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-dependencies'
apply plugin: 'org.starchartlabs.flare.dependency-reporting'
apply plugin: 'org.starchartlabs.flare.increase-test-logging'
apply plugin: 'org.starchartlabs.flare.source-jars'
apply plugin: 'us.kirchmeier.capsule'

description = 'Command line interface for managing encrypted credential files'

dependencyRecommendations {
    propertiesFile file: file("${rootDir}/dependencies.properties")
}

//Always download sources, to allow debugging, and use Eclipse containers for greater portability
eclipse {
    classpath {
        downloadSources=true
    }
}

//Need to exclude the real logger from test runs, so use a special configuration to side-step its inclusion in test runs
configurations {
    capsuleRuntime{
        extendsFrom runtime
    }
}

repositories { mavenCentral() }

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305'
    
    compile 'args4j:args4j'
    compile 'com.google.code.gson:gson'
    compile 'com.squareup.okhttp3:okhttp'
    compile 'commons-codec:commons-codec'
    compile 'org.slf4j:slf4j-api'
    compile 'org.starchartlabs.alloy:alloy-core'
    
    capsuleRuntime 'org.slf4j:slf4j-simple'
    
    testCompile 'com.squareup.okhttp3:mockwebserver'
    testCompile 'org.testng:testng'
    testCompile 'uk.org.lidalia:slf4j-test'
}

//Setup default test behavior, including failure logging
test {
    useTestNG() { useDefaultListeners = true }
}

//Apply module naming to all projects
//Add LICENSE so it is included in all JARs, as well as dependent licenses, fulfilling the "distributions include license" requirement
jar {
    from("${rootDir}"){ include 'LICENSE' }
}

//All projects should provide source code and javadoc, and upload these with any released artifacts
sourcesJar {
    from("${rootDir}"){ include 'LICENSE' }
}

javadocJar{
    from("${rootDir}"){ include 'LICENSE' }
}

task distCapsule(type: FatCapsule) {
    applicationClass 'org.starchartlabs.lure.CommandLineInterface'
    embedConfiguration configurations.capsuleRuntime
}

tasks.assemble.dependsOn distCapsule

artifacts {
    archives distCapsule
}
